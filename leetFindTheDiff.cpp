/*
*
//**********************************************************389. Find the Difference.***************************************************

Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.

Example:

Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.




*******************************************************************TEST CASES:************************************************************
//These are the examples I had created, tweaked and worked on.


"ae"
"bea"


"ae"
"aea"



// Time Complexity: O(n).  
// Space Complexity: O(1).

//********************************************************THIS IS LEET ACCEPTED CODE.***************************************************

*/

//************************************************************Solution 1:************************************************************
//*****************************************************THIS IS LEET ACCEPTED CODE.***********************************************
// Time Complexity: O(nlogn).
// Space Complexity: O(1).	
// This algorithm is Soring based, we sort both strings, iterate through them, the instance curr. chars in both strings are diff, we return the 
// char from "t". Even after iterating entire string "s", we didn't found any diff. in chars, then return last char in "t", as that's the 
// newly added char.







class Solution {
public:
    char findTheDifference(string s, string t) {
        sort(s.begin(), s.end());											// Sort both the strings.
        sort(t.begin(), t.end());
        for(int i=0;i<s.length();i++){
            if(s[i]!=t[i]) return t[i]; 									// Chars mismatch.So, return t's char.
        }
        return t[t.length()-1];												// Return the last char. in "t".
    }
};







//************************************************************Solution 2:************************************************************
//*****************************************************THIS IS LEET ACCEPTED CODE.***********************************************
// Time Complexity: O(n).
// Space Complexity: O(1).	
// This algorithm is HashMap based. We store the count of chars in both strings, later we iterate the HashMap(Vector here), the char. for which
// the count is negative, that's the char, that had occured more in "t" than in "s".




class Solution {
public:
    char findTheDifference(string s, string t) {
        vector<int>v(26);													// Stores the count of chars.
        for(int i=0;i<s.length();i++){
            v[s[i]-97]++;													// Inc. the count of char.
            v[t[i]-97]--;													// Dec. the count of char.
        }
        v[t.back()-97]--;
        for(int i=0;i<26;i++)
            if(v[i]<0) return i+97+'\0';									// Return the char. with neg count.
        
        
    }
};









//************************************************************Solution 3:************************************************************
//*****************************************************THIS IS LEET ACCEPTED CODE.***********************************************
// Time Complexity: O(n).
// Space Complexity: O(1).	
// This algorithm is is Bit Manipulation based. We iterate through both the arrays, we XOR the chars in both arrays with "0", chars occured
// multiple to 2 times cancel out each other. The extra added char(odd #occurances) will remain out, in the char var. and that's returned.






class Solution {
public:
    char findTheDifference(string s, string t) {
        char c=0;															// Stores the XOR of the chars.
        for(int i=0;i<s.length();i++){
            c^=s[i];														// Performs XOR on chars of both strings.
            c^=t[i];
        }
        c^=t.back();
        return c;															// Returns the extra added char(with odd #occurances).
        
        
    }
};



